@using Sudoku.App.Helpers
@using Sudoku.App.Enums
@inject ISudokuService SudokuService
@rendermode InteractiveServer

<table>
    @for (var i = 0; i < 9; i++)
    {
        <tr>
            @for (var j = 0; j < 9; j++)
            {
                var row = i;
                var col = j;
                <td
                    tabindex="0"
                    class="@(Board[row, col].IsFixed ? "fixed-digit" : Validation[row, col] ? "wrong-digit" : "digit")"
                    @ref="_cellRefs[row, col]"
                    @onclick="_ => Focus(row, col)"
                    @onkeydown="e => HandleKeyDown(e, row, col)"> @Board[i, j].Value.ToDigitString()
                </td>
            }
        </tr>
    }
</table>
<div class="text-center">
    <button class="btn btn-warning btn-sm" @onclick="Reset">Reset</button>
</div>


@code {
    
    [Parameter] public SudokuBoard<SudokuCell> Board { get; set; } = new(
        new SudokuCell
        {
            Value = 0,
            IsFixed = false
        });
    
    [Parameter] public EventCallback OnCellValueChanged { get; set; }
    [Parameter] public EventCallback<bool> IsSolved { get; set; }
    private SudokuBoard<bool> Validation { get; set; } = new(false);
    private readonly ElementReference[,] _cellRefs = new ElementReference[9, 9];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        await IsSolved.InvokeAsync(SudokuService.IsSolved(Board, out var illegalDigits));
        Validation = illegalDigits;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, int row, int col)
    {
        if (!int.TryParse(e.Key, out var number))
            return;

        if (Board[row, col].IsFixed)
            return;
        
        Board[row, col].Value = (SudokuDigit)number;

        await IsSolved.InvokeAsync(SudokuService.IsSolved(Board, out var illegalDigits));
        Validation = illegalDigits;
        
        await OnCellValueChanged.InvokeAsync();
    }

    private async Task Focus(int i, int j)
    {
        await _cellRefs[i, j].FocusAsync();
    }

    private async Task Reset()
    {
        for (var i = 0; i < 9; i++)
        {
            for (var j = 0; j < 9; j++)
            {
                if (!Board[i, j].IsFixed)
                    Board[i, j].Value = SudokuDigit.Empty;
            }
        }

        await IsSolved.InvokeAsync(SudokuService.IsSolved(Board, out var illegalDigits));
        Validation = illegalDigits;

        await OnCellValueChanged.InvokeAsync();
    }
}