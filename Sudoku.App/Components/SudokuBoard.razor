@using Sudoku.App.Helpers
@using Sudoku.App.Enums
@rendermode InteractiveServer

@if (Board is not null)
{
    <table>
        @for (var i = 0; i < 9; i++)
        {
            <tr>
                @for (var j = 0; j < 9; j++)
                {
                    var row = i;
                    var col = j;
                    <td
                        tabindex="0"
                        @ref="_cellRefs[row, col]"
                        @onclick="_ => Focus(row, col)"
                        @onkeydown="e => HandleKeyDown(e, row, col)"> @Board[i, j].Value.ToDigitString()
                    </td>
                }
            </tr>
        }
    </table>
}


@code {
    [Parameter] public SudokuBoard<SudokuCell>? Board { get; set; }
    [Parameter] public EventCallback<(int, int)> OnCellValueChanged { get; set; }
    private readonly ElementReference[,] _cellRefs = new ElementReference[9, 9];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Board is not null)
            return;
        
        Board = new SudokuBoard<SudokuCell>(
            new SudokuCell
            {
                Value = 0,
                IsFixed = false
            });
    }

    private void HandleKeyDown(KeyboardEventArgs e, int row, int col)
    {
        if (Board is null || !int.TryParse(e.Key, out var number))
            return;

        if (Board[row, col].IsFixed)
            return;
        
        Board[row, col].Value = (SudokuDigit)number;
        OnCellValueChanged.InvokeAsync((row, col));
    }

    private async Task Focus(int i, int j)
    {
        await _cellRefs[i, j].FocusAsync();
    }
}