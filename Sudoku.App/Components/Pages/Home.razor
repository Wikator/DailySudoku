@page "/"
@inject ISudokuService SudokuService
@inject ISudokuRepository SudokuRepository
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (_board is not null)
{
    <div class="container">
        @if(_error is not null)
        {
            <div class="alert alert-danger" role="alert">
                @_error
            </div>
        }
        
        @if (_isSolved)
        {
            <div class="alert alert-success">
                Board is solved!
            </div>
        }
    
        <SudokuBoard Board="_board.Board" OnCellValueChanged="HandleCellChanged" IsSolved="e => _isSolved = e" />
        <button @onclick="Solve" class="btn btn-primary">Solve</button>
    </div>
}

@code {
    
    SudokuWithIdAndValidation? _board;
    string? _error;
    bool _isSolved;
    string? _userId;
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthState is null)
            _board = await SudokuRepository.GetDailySudokuAsync();
        else
        {
            var authState = await AuthState;
            var user = authState.User;
            _userId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            
            _board = await SudokuRepository.GetDailySudokuAsync(_userId);
        }
    }

    private void Solve()
    {
        if (_board is null)
            return;

        var result = SudokuService.ValidateAndSolve(_board.Board);

        if (result is null)
        {
            _error = "No solution found";
        }
        else
        {
            _error = null;
            _board = _board with { Board = result };
            _isSolved = true;
        }
    }

    private async Task HandleCellChanged()
    {
        if (_board is null || _userId is null)
            return;
        
        var boardToSave = new SudokuBoard<SudokuDigit>((row, col) =>
            _board.Board[row, col].Value);

        await SudokuRepository.SaveDailySudokuProgress(_userId, _board.Id.ToString(), boardToSave, _isSolved);
    }
}