@page "/"
@inject ISudokuService SudokuService
@inject ISudokuRepository SudokuRepository
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (_board is not null)
{
    <div class="container">
        @if(_error is not null)
        {
            <Alert>@_error</Alert>
        }
        
        @if (_isSolved)
        {
            <Alert Color="success">Board is solved!</Alert>
        }
        
        <SudokuBoard
            Class="mb-3"
            Board="_board.Board"
            OnCellValueChanged="HandleCellChanged"
            IsSolved="e => _isSolved = e" />
        
        <div class="text-center">
            @_statuses[_currentBoardIndex].Date
        </div>
        
        <div class="text-center">
            <div class="btn-group ">
                @if (_currentBoardIndex + 1 != _statuses.Count)
                {
                    <button
                        @onclick="PreviousDay"
                        class="btn btn-warning">
                        &laquo; @_statuses[_currentBoardIndex + 1].Date
                    </button>
                }
                else
                {
                    <DisabledButton Color="warning">
                        &laquo; ----------
                    </DisabledButton>
                }
                <button @onclick="Solve" class="btn btn-primary">Solve</button>
                @if (_currentBoardIndex != 0)
                {
                    <button
                        @onclick="NextDay"
                        class="btn btn-warning">
                        @_statuses[_currentBoardIndex - 1].Date &raquo;
                    </button>
                }
                else
                {
                    <DisabledButton Color="warning">
                        ---------- &raquo;
                    </DisabledButton>
                }
            </div>
        </div>
    </div>
}

@code {
    
    SudokuWithIdAndValidation? _board;

    List<DailySudokuStatus> _statuses = [];
    
    string? _error;
    bool _isSolved;
    string? _userId;
    int _currentBoardIndex;
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthState is not null)
        {
            var authState = await AuthState;
            var user = authState.User;
            _userId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        
        _statuses = await SudokuRepository.GetDailySudokuStatuses(_userId);
        await SetDailySudoku();
    }

    private async Task Solve()
    {
        if (_board is null)
            return;

        var result = SudokuService.ValidateAndSolve(_board.Board);

        if (result is null)
        {
            _error = "No solution found";
        }
        else
        {
            _error = null;
            _board = _board with { Board = result };
            _isSolved = true;
            
            if (_userId is null)
                return;
            
            var boardToSave = new SudokuBoard<SudokuDigit>((row, col) =>
                _board.Board[row, col].Value);
            
            await SudokuRepository.SaveDailySudokuProgress(_userId, _board.Id.ToString(), boardToSave, _isSolved);
        }
    }

    private async Task PreviousDay()
    {
        if (_currentBoardIndex + 1 == _statuses.Count)
            return;

        _currentBoardIndex++;
        await SetDailySudoku();
    }

    private async Task NextDay()
    {
        if (_currentBoardIndex == 0)
            return;

        _currentBoardIndex--;
        await SetDailySudoku();
    }

    private async Task HandleCellChanged()
    {
        if (_board is null || _userId is null)
            return;
        
        var boardToSave = new SudokuBoard<SudokuDigit>((row, col) =>
            _board.Board[row, col].Value);

        await SudokuRepository.SaveDailySudokuProgress(_userId, _board.Id.ToString(), boardToSave, _isSolved);
    }

    private async Task SetDailySudoku()
    {
        _board = await SudokuRepository.GetDailySudokuAsync(_userId,_statuses[_currentBoardIndex].Date);
        _isSolved = _statuses[_currentBoardIndex].Status == BoardStatus.Solved;
    }
        
}