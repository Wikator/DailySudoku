@page "/"
@inject ISudokuRepository SudokuRepository
@implements IAsyncDisposable
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (_board is not null)
{
    <div class="container">
        @if (_isSolved)
        {
            <Alert Color="success">Board is solved!</Alert>
        }
        
        <SudokuBoard
            Class="mb-3"
            Board="_board.Board"
            OnCellValueChanged="SaveProgress"
            IsSolved="BoardIsSolvedEventHandler" />

        <div class="text-center mt-3">
            <h3 class="text-muted">Elapsed Time: 
                <span class="badge bg-secondary">@_timeTaken.ToString(@"hh\:mm\:ss")</span>
            </h3>
        </div>

        <div class="text-center">
            <div class="btn-group">
                @if (_currentBoardIndex + 1 != _statuses.Count)
                {
                    <button
                        @onclick="PreviousDay"
                        class="btn btn-warning">
                        &laquo; @_statuses[_currentBoardIndex + 1].Date.ToString("dd/MM/yyyy")
                    </button>
                }
                else
                {
                    <DisabledButton Color="warning">
                        &laquo; @_statuses[_currentBoardIndex].Date.AddDays(-1).ToString("dd/MM/yyyy")
                    </DisabledButton>
                }
                <DisabledButton>
                    @_statuses[_currentBoardIndex].Date.ToString("dd/MM/yyyy")
                </DisabledButton>
                @if (_currentBoardIndex != 0)
                {
                    <button
                        @onclick="NextDay"
                        class="btn btn-warning">
                        @_statuses[_currentBoardIndex - 1].Date.ToString("dd/MM/yyyy") &raquo;
                    </button>
                }
                else
                {
                    <DisabledButton Color="warning">
                        @_statuses[_currentBoardIndex].Date.AddDays(1).ToString("dd/MM/yyyy") &raquo;
                    </DisabledButton>
                }
            </div>
        </div>
    </div>
}

@code {
    
    DailySudokuWithProgress? _board;

    List<DailySudokuStatus> _statuses = [];
    
    bool _isSolved;
    string? _userId;
    int _currentBoardIndex;
    TimeSpan _timeTaken;
    Timer? _timer;
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthState is not null)
        {
            var authState = await AuthState;
            var user = authState.User;
            _userId = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
        
        _statuses = await SudokuRepository.GetDailySudokuStatuses(_userId);
        await SetDailySudoku();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!_isSolved)
        {
            _timer ??= new Timer(_ => UpdateElapsedTime(),
                null, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(1));
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        _timer?.DisposeAsync();
        await SaveProgress();
    }

    private async Task PreviousDay()
    {
        if (_currentBoardIndex + 1 == _statuses.Count)
            return;

        _currentBoardIndex++;
        await SaveProgress();
        await SetDailySudoku();
    }

    private async Task NextDay()
    {
        if (_currentBoardIndex == 0)
            return;

        _currentBoardIndex--;
        await SaveProgress();
        await SetDailySudoku();
    }

    private async Task SetDailySudoku()
    {
        _board = await SudokuRepository.GetDailySudokuAsync(_userId,_statuses[_currentBoardIndex].Date);
        _isSolved = _statuses[_currentBoardIndex].Status == BoardStatus.Solved;
        _timeTaken = _board.TimeTaken;
        
        if (_isSolved)
        {
            _timer?.DisposeAsync();
            _timer = null;
        }
    }
    
    private async Task SaveProgress()
    {
        if (_board is null || _userId is null)
            return;
        
        var boardToSave = new SudokuBoard<SudokuDigit>((row, col) =>
            _board.Board[row, col].Value);
        
        await SudokuRepository.SaveDailySudokuProgress(_userId, _board.Id.ToString(), boardToSave,
            _isSolved, _timeTaken);
    }
    
    private void UpdateElapsedTime()
    {
        _timeTaken = _timeTaken.Add(TimeSpan.FromSeconds(1));
        InvokeAsync(StateHasChanged);
    }
    
    private async Task BoardIsSolvedEventHandler(bool isSolved)
    {
        _isSolved = isSolved;

        if (_timer is null)
            return;
        
        await _timer.DisposeAsync();
        _timer = null;
    }
}