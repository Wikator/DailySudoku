@page "/RandomSudoku"
@inject ISudokuService SudokuService
@inject ISudokuRepository SudokuRepository
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<h3>RandomSudoku</h3>

<div class="container">
    @if (_boardSolved)
    {
        <Alert Color="success">Puzzle solved successfully</Alert>
    }
    
    @if (_boardSaved)
    {
        <Alert Color="success">Puzzle saved successfully</Alert>
    }
    
    @if (Board is null)
    {
        <ReadonlySudokuBoard />
        <div class="text-center">
            Generating...
        </div>
    }
    else
    {
        <SudokuBoard Board="Board" IsSolved="e => _boardSolved = e" /> 
    }
    
    <div class="text-center mb-3">
        <button
            class="@("btn btn-primary" + (AuthState is null || Board is null ? " disabled" : ""))"
            @onclick="SavePuzzle">Save this puzzle</button>
    </div>
    
    <div class="text-center">
        <button
            class="@("btn btn-primary" + (Board is null ? " disabled" : ""))"
            @onclick="Solve">Show solution</button>
    </div>
</div>

@code {
    SudokuBoard<SudokuCell>? Board { get; set; }
    bool _boardSolved;
    bool _boardSaved;
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (!firstRender)
            return;
        
        var generatedBoard = await SudokuService.GenerateBoard();
        Board = new SudokuBoard<SudokuCell>((row, col) =>
            new SudokuCell
            {
                Value = generatedBoard[row, col],
                IsFixed = generatedBoard[row, col] != SudokuDigit.Empty
            });
        
        StateHasChanged();
    }

    private async Task SavePuzzle()
    {
        if (AuthState is null || Board is null)
            return;
        
        var authState = await AuthState;
        var user = authState.User;
        var userId = user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value;

        var puzzle = new SudokuBoard<SudokuDigit>((row, col) =>
            Board[row, col].IsFixed ? Board[row, col].Value : SudokuDigit.Empty);

        await SudokuRepository.CreateSudokuAsync(puzzle.Board, Solutions.OneSolution, userId);

        _boardSaved = true;
        StateHasChanged();
        await Task.Delay(TimeSpan.FromSeconds(5));
        _boardSaved = false;
    }

    private void Solve()
    {
        if (Board is null)
            return;

        var board = new SudokuBoard<SudokuCell>((row, col) =>
            new SudokuCell
            {
                Value = Board[row, col].IsFixed ? Board[row, col].Value : SudokuDigit.Empty,
                IsFixed = Board[row, col].IsFixed
            });

        Board = SudokuService.Solve(board);
        _boardSolved = true;
    }
}