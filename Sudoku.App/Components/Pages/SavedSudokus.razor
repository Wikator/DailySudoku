@page "/SavedSudokus/{page?}"

@inject ISudokuRepository SudokuRepository
@inject NavigationManager NavigationManager
@attribute [Authorize]

<h3>Saved Sudokus</h3>

<div class="container">
    <div class="row">
        @foreach (var board in _userBoards)
        {
            <div class="col-6 board">
                <NavLink href="@($"/solve/{board.Id}")">
                    <ReadonlySudokuBoard Board="board.Board"/>
                </NavLink>
                <form class="text-center" method="post" data-enhance
                    @formname="@($"delete-form-{board.Id}")"
                    @onsubmit="_ => DeleteSudoku(board.Id.ToString())">
                    <button class="btn btn-danger">Remove</button>
                    <AntiforgeryToken />
                </form>
            </div>
        }

        @for (var i = 0; i < 4 - _userBoards.Count; i++)
        {
            <div class="col-6 board">
                <ReadonlySudokuBoard/>
                <div class="text-center">
                    <button class="btn btn-danger disabled">Remove</button>
                </div>
            </div>
        }
    </div>

    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="@(Page == "1" ? "page-item disabled" : "page-item")">
                <NavLink class="page-link" href="@("/SavedSudokus/1")">
                    <span aria-hidden="true">&laquo;</span>
                </NavLink>
            </li>
            @for (var i = 1; i <= _totalPages; i++)
            {
                var pageNumber = i;
                <li class="page-item">
                    <NavLink class="page-link" href="@($"/SavedSudokus/{pageNumber}")">
                        @pageNumber
                    </NavLink>
                </li>
            }
            <li class="@(Page == _totalPages.ToString() ? "page-item disabled" : "page-item")">
                <NavLink class="page-link" href="@($"/SavedSudokus/{_totalPages}")">
                    <span aria-hidden="true">&raquo;</span>
                </NavLink>
            </li>
        </ul>
    </nav>
</div>

@code {
    [Parameter] public string Page { get; set; } = "";
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthState { get; set; }
    
    List<SudokuWithId> _userBoards = [];
    private int _totalPages = 1;

    private const int PageSize = 4;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState is null)
            NavigationManager.NavigateTo("/");
        else
        {
            if (string.IsNullOrEmpty(Page))
                Page = "1";
            
            if (int.TryParse(Page, out var pageNumber))
            {
                var authState = await AuthState;
                var user = authState.User;
                var userId = user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value;
                
                var pagedBoards = await SudokuRepository.GetUserPagedSudoku(userId, pageNumber,
                    PageSize);
                
                _userBoards = pagedBoards.Items;
                _totalPages = pagedBoards.TotalPages;
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }
    
    private async Task DeleteSudoku(string id)
    {
        if (AuthState is null)
            return;
        
        var authState = await AuthState;
        var user = authState.User;
        var userId = user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value;
        
        await SudokuRepository.RemoveSudokuFromSaved(userId, id);
        NavigationManager.NavigateTo($"/SavedSudokus/{Page}");
    }
}